/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"


void SystemClock_Config(void);
uint8_t check_button_state(GPIO_TypeDef* PORT, uint8_t PIN);

uint8_t switchState = 0;
uint8_t ledState = 0;
EDGE_TYPE edgeResult = NONE;
uint8_t lastState = 0;

int main(void)
{
  /*Default system setup*/
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  SystemClock_Config();

  /*EXTI configuration*/
  //NVIC_SetPriority(EXTI3_IRQn, 2);
  //NVIC_EnableIRQ(EXTI3_IRQn);
  //Set interrupt priority and enable EXTI
  NVIC->IP[9] |= 2 << 4;
  NVIC->ISER[0] |= 1 << 9;


  /*set EXTI source PA3*/
  SYSCFG->EXTICR[0] &= ~(0xFU << 12U);
  //Enable interrupt from EXTI line 3
  EXTI->IMR |= EXTI_IMR_MR3;
  //Set EXTI trigger to falling edge
  EXTI->RTSR &= ~(EXTI_IMR_MR3);
//  EXTI->RTSR |= EXTI_RTSR_RT3;
  EXTI->FTSR |= EXTI_IMR_MR3;

  /*GPIO configuration, PA3*/
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
  GPIOA->MODER &= ~(GPIO_MODER_MODER3);
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR3_0;


  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
  GPIOA->MODER &= ~(GPIO_MODER_MODER4);
  GPIOA->MODER |= GPIO_MODER_MODER4_0;
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4);
  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR4);
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4);

//  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
//  GPIOA->MODER |= GPIO_MODER_MODER4_0;  // Set pin PA3 as output



  while (1)
  {
      uint8_t buttonState = LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_3);

          if (edgeResult == FALL) {
              // Toggle the LED state
              if (ledState == 1) {
            	  GPIOA->BSRR |= GPIO_BSRR_BR_4;

                  ledState = 0;
              } else {

                  GPIOA->BSRR |= GPIO_BSRR_BS_4;
                  ledState = 1;
              }

              // Reset edgeResult
              edgeResult = NONE;
          }

  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
  {
  Error_Handler();  
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
  {
  
  }
  LL_Init1msTick(8000000);
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(8000000);
}




void EXTI3_IRQHandler(void)
{

    uint8_t pin_state = 1;
    uint8_t samples = 5;
    uint8_t buttonState;

    while (1){
    	buttonState = LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_3);

		if (pin_state != buttonState) {
			buttonState = pin_state;
//			pin_state = buttonState;
//			lastState = buttonState;
			sampleCount = 1;
//			break;
		} else {
			sampleCount++;
		}

		if (sampleCount >= samples) {
			sampleCount = 0;
			if (buttonState == 1){ edgeResult = RISE;}
			else{ edgeResult = FALL;}
			lastState = buttonState;
			break;
		}
    }

//	//Clear pending register flag
	NVIC->ICPR[0] |= (1 << 9);
	EXTI->PR |= (EXTI_PR_PIF3);
	// Sync. instructions
	__DSB();
	__ISB();
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
