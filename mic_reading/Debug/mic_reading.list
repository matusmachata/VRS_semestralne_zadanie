
mic_reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003448  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003614  08003614  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003614  08003614  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800361c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003628  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003628  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076e9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec4  00000000  00000000  00027768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051c  00000000  00000000  00029d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a597  00000000  00000000  0002a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b49f  00000000  00000000  000447eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095c82  00000000  00000000  0004fc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000191c  00000000  00000000  000e590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e7228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035b8 	.word	0x080035b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035b8 	.word	0x080035b8

080001c8 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d6:	f001 f81d 	bl	8001214 <HAL_GPIO_WritePin>
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}

080001de <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ec:	f001 f812 	bl	8001214 <HAL_GPIO_WritePin>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000202:	f001 f807 	bl	8001214 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}

0800020a <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f000 fffc 	bl	8001214 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}

08000220 <TM1637_DisplayDecimal>:
    TM1637_SetBrightness(8);
}


void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	e032      	b.n	8000296 <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <TM1637_DisplayDecimal+0xd4>)
 8000234:	fb83 2301 	smull	r2, r3, r3, r1
 8000238:	109a      	asrs	r2, r3, #2
 800023a:	17cb      	asrs	r3, r1, #31
 800023c:	1ad2      	subs	r2, r2, r3
 800023e:	4613      	mov	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	4413      	add	r3, r2
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	1aca      	subs	r2, r1, r3
 8000248:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <TM1637_DisplayDecimal+0xd8>)
 800024a:	5c99      	ldrb	r1, [r3, r2]
 800024c:	f107 020c 	add.w	r2, r7, #12
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	2b02      	cmp	r3, #2
 800025c:	d110      	bne.n	8000280 <TM1637_DisplayDecimal+0x60>
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d00d      	beq.n	8000280 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8000264:	f107 020c 	add.w	r2, r7, #12
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000272:	b2d9      	uxtb	r1, r3
 8000274:	f107 020c 	add.w	r2, r7, #12
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	4413      	add	r3, r2
 800027c:	460a      	mov	r2, r1
 800027e:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <TM1637_DisplayDecimal+0xd4>)
 8000284:	fb82 1203 	smull	r1, r2, r2, r3
 8000288:	1092      	asrs	r2, r2, #2
 800028a:	17db      	asrs	r3, r3, #31
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b03      	cmp	r3, #3
 800029a:	ddc9      	ble.n	8000230 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 800029c:	f000 f843 	bl	8000326 <TM1637_Start>
    TM1637_WriteByte(0x40);
 80002a0:	2040      	movs	r0, #64	; 0x40
 80002a2:	f000 f872 	bl	800038a <TM1637_WriteByte>
    TM1637_ReadResult();
 80002a6:	f000 f860 	bl	800036a <TM1637_ReadResult>
    TM1637_Stop();
 80002aa:	f000 f849 	bl	8000340 <TM1637_Stop>

    TM1637_Start();
 80002ae:	f000 f83a 	bl	8000326 <TM1637_Start>
    TM1637_WriteByte(0xc0);
 80002b2:	20c0      	movs	r0, #192	; 0xc0
 80002b4:	f000 f869 	bl	800038a <TM1637_WriteByte>
    TM1637_ReadResult();
 80002b8:	f000 f857 	bl	800036a <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	e00e      	b.n	80002e0 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	f1c3 0303 	rsb	r3, r3, #3
 80002c8:	3318      	adds	r3, #24
 80002ca:	443b      	add	r3, r7
 80002cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85a 	bl	800038a <TM1637_WriteByte>
        TM1637_ReadResult();
 80002d6:	f000 f848 	bl	800036a <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	3301      	adds	r3, #1
 80002de:	613b      	str	r3, [r7, #16]
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	dded      	ble.n	80002c2 <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 80002e6:	f000 f82b 	bl	8000340 <TM1637_Stop>
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	66666667 	.word	0x66666667
 80002f8:	080035d0 	.word	0x080035d0

080002fc <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8000306:	f000 f80e 	bl	8000326 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3b79      	subs	r3, #121	; 0x79
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f83a 	bl	800038a <TM1637_WriteByte>
    TM1637_ReadResult();
 8000316:	f000 f828 	bl	800036a <TM1637_ReadResult>
    TM1637_Stop();
 800031a:	f000 f811 	bl	8000340 <TM1637_Stop>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <TM1637_Start>:

void TM1637_Start(void)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 800032a:	f7ff ff4d 	bl	80001c8 <TM1637_ClkHigh>
    TM1637_DataHigh();
 800032e:	f7ff ff61 	bl	80001f4 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8000332:	2002      	movs	r0, #2
 8000334:	f000 f853 	bl	80003de <TM1637_DelayUsec>
    TM1637_DataLow();
 8000338:	f7ff ff67 	bl	800020a <TM1637_DataLow>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8000344:	f7ff ff4b 	bl	80001de <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8000348:	2002      	movs	r0, #2
 800034a:	f000 f848 	bl	80003de <TM1637_DelayUsec>
    TM1637_DataLow();
 800034e:	f7ff ff5c 	bl	800020a <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8000352:	2002      	movs	r0, #2
 8000354:	f000 f843 	bl	80003de <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8000358:	f7ff ff36 	bl	80001c8 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 800035c:	2002      	movs	r0, #2
 800035e:	f000 f83e 	bl	80003de <TM1637_DelayUsec>
    TM1637_DataHigh();
 8000362:	f7ff ff47 	bl	80001f4 <TM1637_DataHigh>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}

0800036a <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 800036e:	f7ff ff36 	bl	80001de <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8000372:	2005      	movs	r0, #5
 8000374:	f000 f833 	bl	80003de <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8000378:	f7ff ff26 	bl	80001c8 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 800037c:	2002      	movs	r0, #2
 800037e:	f000 f82e 	bl	80003de <TM1637_DelayUsec>
    TM1637_ClkLow();
 8000382:	f7ff ff2c 	bl	80001de <TM1637_ClkLow>
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}

0800038a <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b084      	sub	sp, #16
 800038e:	af00      	add	r7, sp, #0
 8000390:	4603      	mov	r3, r0
 8000392:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	e019      	b.n	80003ce <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 800039a:	f7ff ff20 	bl	80001de <TM1637_ClkLow>
		if (b & 0x01) {
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 80003a8:	f7ff ff24 	bl	80001f4 <TM1637_DataHigh>
 80003ac:	e001      	b.n	80003b2 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 80003ae:	f7ff ff2c 	bl	800020a <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 80003b2:	2003      	movs	r0, #3
 80003b4:	f000 f813 	bl	80003de <TM1637_DelayUsec>
		b >>= 1;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	085b      	lsrs	r3, r3, #1
 80003bc:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 80003be:	f7ff ff03 	bl	80001c8 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 80003c2:	2003      	movs	r0, #3
 80003c4:	f000 f80b 	bl	80003de <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2b07      	cmp	r3, #7
 80003d2:	dde2      	ble.n	800039a <TM1637_WriteByte+0x10>
	}
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 80003e6:	e00d      	b.n	8000404 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	e003      	b.n	80003f6 <TM1637_DelayUsec+0x18>
					__NOP();
 80003ee:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003fc:	dbf7      	blt.n	80003ee <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3b01      	subs	r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1ee      	bne.n	80003e8 <TM1637_DelayUsec+0xa>
        }
    }
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_DMA_Init+0x38>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <MX_DMA_Init+0x38>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_DMA_Init+0x38>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	200e      	movs	r0, #14
 800043c:	f000 fbab 	bl	8000b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000440:	200e      	movs	r0, #14
 8000442:	f000 fbc4 	bl	8000bce <HAL_NVIC_EnableIRQ>

}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <MX_GPIO_Init>:

/** Configure pins
     PA12   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_GPIO_Init+0xa0>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <MX_GPIO_Init+0xa0>)
 8000470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_GPIO_Init+0xa0>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <MX_GPIO_Init+0xa0>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MX_GPIO_Init+0xa0>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <MX_GPIO_Init+0xa0>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DATA_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 feb6 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80004a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 fd34 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004da:	2305      	movs	r3, #5
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 fd22 	bl	8000f30 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_I2S2_Init+0x54>)
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MX_I2S2_Init+0x58>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_I2S2_Init+0x54>)
 8000504:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000508:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_I2S2_Init+0x54>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_I2S2_Init+0x54>)
 8000512:	2203      	movs	r2, #3
 8000514:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_I2S2_Init+0x54>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_I2S2_Init+0x54>)
 800051e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000522:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_I2S2_Init+0x54>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_I2S2_Init+0x54>)
 800052c:	2202      	movs	r2, #2
 800052e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_I2S2_Init+0x54>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_I2S2_Init+0x54>)
 8000538:	f000 fe84 	bl	8001244 <HAL_I2S_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000542:	f000 f92a 	bl	800079a <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	40003800 	.word	0x40003800

08000554 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a3a      	ldr	r2, [pc, #232]	; (800065c <HAL_I2S_MspInit+0x108>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d16e      	bne.n	8000654 <HAL_I2S_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000576:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a39      	ldr	r2, [pc, #228]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 800057c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b34      	ldr	r3, [pc, #208]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a33      	ldr	r2, [pc, #204]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <HAL_I2S_MspInit+0x10c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PA11     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80005be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005d0:	2305      	movs	r3, #5
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4822      	ldr	r0, [pc, #136]	; (8000664 <HAL_I2S_MspInit+0x110>)
 80005dc:	f000 fca8 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 fc96 	bl	8000f30 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <HAL_I2S_MspInit+0x118>)
 8000608:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HAL_I2S_MspInit+0x114>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_I2S_MspInit+0x114>)
 800061e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000622:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_I2S_MspInit+0x114>)
 800062e:	2220      	movs	r2, #32
 8000630:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_I2S_MspInit+0x114>)
 800063a:	f000 fae2 	bl	8000c02 <HAL_DMA_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_I2S_MspInit+0xf4>
    {
      Error_Handler();
 8000644:	f000 f8a9 	bl	800079a <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_I2S_MspInit+0x114>)
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_I2S_MspInit+0x114>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40003800 	.word	0x40003800
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400
 8000668:	20000070 	.word	0x20000070
 800066c:	40020044 	.word	0x40020044

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 f929 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f853 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f7ff fee9 	bl	8000454 <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f7ff fec9 	bl	8000418 <MX_DMA_Init>
  MX_I2S2_Init();
 8000686:	f7ff ff37 	bl	80004f8 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  TM1637_SetBrightness(7);
 800068a:	2007      	movs	r0, #7
 800068c:	f7ff fe36 	bl	80002fc <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  size_t bytesIn = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
//	      HAL_SPI_Receive(&hspi1, (uint8_t*)sBuffer, BUFFER_LEN * 2, 1000);
	  	  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)sBuffer, BUFFER_LEN);
 8000694:	2240      	movs	r2, #64	; 0x40
 8000696:	491f      	ldr	r1, [pc, #124]	; (8000714 <main+0xa4>)
 8000698:	481f      	ldr	r0, [pc, #124]	; (8000718 <main+0xa8>)
 800069a:	f000 ff31 	bl	8001500 <HAL_I2S_Receive_DMA>
	      mean = 0;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <main+0xac>)
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	      for (int i = 0; i < BUFFER_LEN; ++i) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e012      	b.n	80006d2 <main+0x62>
	        mean += sBuffer[i];
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <main+0xa4>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <main+0xac>)
 80006be:	edd3 7a00 	vldr	s15, [r3]
 80006c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <main+0xac>)
 80006c8:	edc3 7a00 	vstr	s15, [r3]
	      for (int i = 0; i < BUFFER_LEN; ++i) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b3f      	cmp	r3, #63	; 0x3f
 80006d6:	dde9      	ble.n	80006ac <main+0x3c>
	      }
	      mean /= BUFFER_LEN;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <main+0xac>)
 80006da:	ed93 7a00 	vldr	s14, [r3]
 80006de:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000720 <main+0xb0>
 80006e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0xac>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]

	      float absMean = fabs(mean);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <main+0xac>)
 80006ee:	edd3 7a00 	vldr	s15, [r3]
 80006f2:	eef0 7ae7 	vabs.f32	s15, s15
 80006f6:	edc7 7a01 	vstr	s15, [r7, #4]
		  TM1637_DisplayDecimal(absMean, 1);
 80006fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80006fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000702:	2101      	movs	r1, #1
 8000704:	ee17 0a90 	vmov	r0, s15
 8000708:	f7ff fd8a 	bl	8000220 <TM1637_DisplayDecimal>
		  HAL_Delay(200);
 800070c:	20c8      	movs	r0, #200	; 0xc8
 800070e:	f000 f943 	bl	8000998 <HAL_Delay>
  {
 8000712:	e7bd      	b.n	8000690 <main+0x20>
 8000714:	200000b8 	.word	0x200000b8
 8000718:	20000028 	.word	0x20000028
 800071c:	200000b4 	.word	0x200000b4
 8000720:	42800000 	.word	0x42800000

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b090      	sub	sp, #64	; 0x40
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	2228      	movs	r2, #40	; 0x28
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 ff14 	bl	8003560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000752:	2300      	movs	r3, #0
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fb4a 	bl	8001df4 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000766:	f000 f818 	bl	800079a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fb74 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800078e:	f000 f804 	bl	800079a <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3740      	adds	r7, #64	; 0x40
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079e:	b672      	cpsid	i
}
 80007a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f88e 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <DMA1_Channel4_IRQHandler+0x10>)
 8000846:	f000 fa82 	bl	8000d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000070 	.word	0x20000070

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 fe63 	bl	8003570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008aa:	f7ff fee1 	bl	8000670 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008bc:	0800361c 	.word	0x0800361c
  ldr r2, =_sbss
 80008c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c4:	2000013c 	.word	0x2000013c

080008c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_IRQHandler>
	...

080008cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f94f 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff ff5c 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f967 	bl	8000bea <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f92f 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	20000138 	.word	0x20000138

08000980 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;  
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000138 	.word	0x20000138

08000998 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff3e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff31 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e037      	b.n	8000c88 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f940 	bl	8000ef0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}  
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <HAL_DMA_Start_IT+0x20>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e04a      	b.n	8000d46 <HAL_DMA_Start_IT+0xb6>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d13a      	bne.n	8000d38 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f8d4 	bl	8000e94 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 020e 	orr.w	r2, r2, #14
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e00f      	b.n	8000d26 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 020a 	orr.w	r2, r2, #10
 8000d14:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0204 	bic.w	r2, r2, #4
 8000d24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 0201 	orr.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e005      	b.n	8000d44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d40:	2302      	movs	r3, #2
 8000d42:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d024      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x72>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01f      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d107      	bne.n	8000d9e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0204 	bic.w	r2, r2, #4
 8000d9c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da6:	2104      	movs	r1, #4
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d06a      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dbe:	e065      	b.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d02c      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xdc>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d027      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020a 	bic.w	r2, r2, #10
 8000df6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e08:	2102      	movs	r1, #2
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d035      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e28:	e030      	b.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	2208      	movs	r2, #8
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d028      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d023      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 020e 	bic.w	r2, r2, #14
 8000e52:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e62:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	4798      	blx	r3
    }
  }
}  
 8000e8a:	e7ff      	b.n	8000e8c <HAL_DMA_IRQHandler+0x13e>
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d108      	bne.n	8000ed4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ed2:	e007      	b.n	8000ee4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	60da      	str	r2, [r3, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <DMA_CalcBaseAndBitshift+0x34>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <DMA_CalcBaseAndBitshift+0x38>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	009a      	lsls	r2, r3, #2
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <DMA_CalcBaseAndBitshift+0x3c>)
 8000f14:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e14e      	b.n	80011de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8140 	beq.w	80011d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0203 	and.w	r2, r3, #3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 809a 	beq.w	80011d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a54      	ldr	r2, [pc, #336]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b52      	ldr	r3, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x2cc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010e6:	d013      	beq.n	8001110 <HAL_GPIO_Init+0x1e0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a46      	ldr	r2, [pc, #280]	; (8001204 <HAL_GPIO_Init+0x2d4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00d      	beq.n	800110c <HAL_GPIO_Init+0x1dc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_GPIO_Init+0x2d8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x1d8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a44      	ldr	r2, [pc, #272]	; (800120c <HAL_GPIO_Init+0x2dc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_GPIO_Init+0x1d4>
 8001100:	2303      	movs	r3, #3
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 8001104:	2305      	movs	r3, #5
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 8001108:	2302      	movs	r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1e2>
 8001110:	2300      	movs	r3, #0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001122:	4937      	ldr	r1, [pc, #220]	; (8001200 <HAL_GPIO_Init+0x2d0>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_GPIO_Init+0x2e0>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f aea9 	bne.w	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001230:	e002      	b.n	8001238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b096      	sub	sp, #88	; 0x58
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
#if defined(SPI_I2S_FULLDUPLEX_SUPPORT)
  RCC_PeriphCLKInitTypeDef rccperiphclkinit;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e144      	b.n	80014e0 <HAL_I2S_Init+0x29c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a9e      	ldr	r2, [pc, #632]	; (80014e8 <HAL_I2S_Init+0x2a4>)
 800126e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f96f 	bl	8000554 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800128c:	f023 030f 	bic.w	r3, r3, #15
 8001290:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d078      	beq.n	8001394 <HAL_I2S_Init+0x150>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80012aa:	2310      	movs	r3, #16
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ae:	e001      	b.n	80012b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80012b0:	2320      	movs	r3, #32
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d802      	bhi.n	80012c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80012bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Get the source clock value **********************************************/
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
    rccperiphclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c6:	60fb      	str	r3, [r7, #12]

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10a      	bne.n	80012e6 <HAL_I2S_Init+0xa2>
    {
      /* Set external clock as I2S clock source */
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_EXT;
 80012d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 ffae 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>

      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80012e0:	4b82      	ldr	r3, [pc, #520]	; (80014ec <HAL_I2S_Init+0x2a8>)
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
 80012e4:	e009      	b.n	80012fa <HAL_I2S_Init+0xb6>
    }
    else
    {
      /* Set SYSCLK as I2S clock source */
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 ffa4 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>

      /* Get the I2S source clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 80012f4:	f001 ff38 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 80012f8:	6478      	str	r0, [r7, #68]	; 0x44
      i2sclk = HAL_RCC_GetPCLK1Freq();
    }
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001302:	d125      	bne.n	8001350 <HAL_I2S_Init+0x10c>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d010      	beq.n	800132e <HAL_I2S_Init+0xea>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001312:	fbb2 f2f3 	udiv	r2, r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	3305      	adds	r3, #5
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
 800132c:	e01f      	b.n	800136e <HAL_I2S_Init+0x12a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800132e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001334:	fbb2 f2f3 	udiv	r2, r2, r3
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	3305      	adds	r3, #5
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48
 800134e:	e00e      	b.n	800136e <HAL_I2S_Init+0x12a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001354:	fbb2 f2f3 	udiv	r2, r2, r3
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	3305      	adds	r3, #5
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800136e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001370:	4a5f      	ldr	r2, [pc, #380]	; (80014f0 <HAL_I2S_Init+0x2ac>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800137a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	653b      	str	r3, [r7, #80]	; 0x50

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800138c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	653b      	str	r3, [r7, #80]	; 0x50
 8001392:	e003      	b.n	800139c <HAL_I2S_Init+0x158>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001394:	2302      	movs	r3, #2
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
    i2sodd = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	653b      	str	r3, [r7, #80]	; 0x50
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d902      	bls.n	80013a8 <HAL_I2S_Init+0x164>
 80013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a4:	2bff      	cmp	r3, #255	; 0xff
 80013a6:	d907      	bls.n	80013b8 <HAL_I2S_Init+0x174>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f043 0210 	orr.w	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e093      	b.n	80014e0 <HAL_I2S_Init+0x29c>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013be:	ea42 0103 	orr.w	r1, r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013c8:	430a      	orrs	r2, r1
 80013ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80013d6:	f023 030f 	bic.w	r3, r3, #15
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6851      	ldr	r1, [r2, #4]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6892      	ldr	r2, [r2, #8]
 80013e2:	4311      	orrs	r1, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68d2      	ldr	r2, [r2, #12]
 80013e8:	4311      	orrs	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6992      	ldr	r2, [r2, #24]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d165      	bne.n	80014d0 <HAL_I2S_Init+0x28c>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3b      	ldr	r2, [pc, #236]	; (80014f4 <HAL_I2S_Init+0x2b0>)
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <HAL_I2S_Init+0x2b4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_I2S_Init+0x1d4>
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_I2S_Init+0x2b8>)
 8001416:	e001      	b.n	800141c <HAL_I2S_Init+0x1d8>
 8001418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	4935      	ldr	r1, [pc, #212]	; (80014f8 <HAL_I2S_Init+0x2b4>)
 8001424:	428a      	cmp	r2, r1
 8001426:	d101      	bne.n	800142c <HAL_I2S_Init+0x1e8>
 8001428:	4a34      	ldr	r2, [pc, #208]	; (80014fc <HAL_I2S_Init+0x2b8>)
 800142a:	e001      	b.n	8001430 <HAL_I2S_Init+0x1ec>
 800142c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001430:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_I2S_Init+0x2b4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_I2S_Init+0x204>
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_I2S_Init+0x2b8>)
 8001446:	e001      	b.n	800144c <HAL_I2S_Init+0x208>
 8001448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800144c:	2202      	movs	r2, #2
 800144e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <HAL_I2S_Init+0x2b4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_I2S_Init+0x21a>
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_I2S_Init+0x2b8>)
 800145c:	e001      	b.n	8001462 <HAL_I2S_Init+0x21e>
 800145e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001470:	d003      	beq.n	800147a <HAL_I2S_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <HAL_I2S_Init+0x23e>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001480:	e001      	b.n	8001486 <HAL_I2S_Init+0x242>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001482:	2300      	movs	r3, #0
 8001484:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001488:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001490:	4313      	orrs	r3, r2
 8001492:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800149a:	4313      	orrs	r3, r2
 800149c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_I2S_Init+0x2b4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_I2S_Init+0x282>
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_I2S_Init+0x2b8>)
 80014c4:	e001      	b.n	80014ca <HAL_I2S_Init+0x286>
 80014c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80014ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3758      	adds	r7, #88	; 0x58
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800182d 	.word	0x0800182d
 80014ec:	007a1200 	.word	0x007a1200
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	08001941 	.word	0x08001941
 80014f8:	40003800 	.word	0x40003800
 80014fc:	40003400 	.word	0x40003400

08001500 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_I2S_Receive_DMA+0x1a>
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0a1      	b.n	8001662 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_I2S_Receive_DMA+0x2e>
 800152a:	2302      	movs	r3, #2
 800152c:	e099      	b.n	8001662 <HAL_I2S_Receive_DMA+0x162>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	e089      	b.n	8001662 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2204      	movs	r2, #4
 8001552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d002      	beq.n	800157a <HAL_I2S_Receive_DMA+0x7a>
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10a      	bne.n	8001590 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	865a      	strh	r2, [r3, #50]	; 0x32
 800158e:	e005      	b.n	800159c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a0:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_I2S_Receive_DMA+0x16c>)
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_I2S_Receive_DMA+0x170>)
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_I2S_Receive_DMA+0x174>)
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015c2:	d10a      	bne.n	80015da <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	330c      	adds	r3, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80015f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80015f2:	f7ff fb4d 	bl	8000c90 <HAL_DMA_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00f      	beq.n	800161c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f043 0208 	orr.w	r2, r3, #8
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e022      	b.n	8001662 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001638:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800170b 	.word	0x0800170b
 8001670:	080016c9 	.word	0x080016c9
 8001674:	08001727 	.word	0x08001727

08001678 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ffcf 	bl	80016a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff ffb7 	bl	800168c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0203 	bic.w	r2, r2, #3
 8001742:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f043 0208 	orr.w	r2, r3, #8
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff ffa5 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1c9a      	adds	r2, r3, #2
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10e      	bne.n	80017c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff59 	bl	8001678 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	b292      	uxth	r2, r2
 80017e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	1c9a      	adds	r2, r3, #2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001814:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ff3e 	bl	80016a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b04      	cmp	r3, #4
 8001846:	d13a      	bne.n	80018be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d109      	bne.n	8001866 <I2S_IRQHandler+0x3a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d102      	bne.n	8001866 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffb4 	bl	80017ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	d126      	bne.n	80018be <I2S_IRQHandler+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d11f      	bne.n	80018be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800188c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fefb 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d136      	bne.n	8001938 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d109      	bne.n	80018e8 <I2S_IRQHandler+0xbc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	2b80      	cmp	r3, #128	; 0x80
 80018e0:	d102      	bne.n	80018e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff45 	bl	8001772 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d122      	bne.n	8001938 <I2S_IRQHandler+0x10c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d11b      	bne.n	8001938 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800190e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0204 	orr.w	r2, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff febe 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800195a:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800195c:	e001      	b.n	8001962 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800195e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a8b      	ldr	r2, [pc, #556]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001978:	4b8a      	ldr	r3, [pc, #552]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800197a:	e001      	b.n	8001980 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800197c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198c:	d004      	beq.n	8001998 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8099 	bne.w	8001aca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f925 	bl	8001bfc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f9c8 	bl	8001d5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d13a      	bne.n	8001a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d035      	beq.n	8001a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80019ec:	e001      	b.n	80019f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80019ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4969      	ldr	r1, [pc, #420]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80019fa:	428b      	cmp	r3, r1
 80019fc:	d101      	bne.n	8001a02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80019fe:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a00:	e001      	b.n	8001a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f043 0202 	orr.w	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe34 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	f040 80c3 	bne.w	8001bde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80bd 	beq.w	8001bde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a80:	e001      	b.n	8001a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4944      	ldr	r1, [pc, #272]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a8e:	428b      	cmp	r3, r1
 8001a90:	d101      	bne.n	8001a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a94:	e001      	b.n	8001a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f043 0204 	orr.w	r2, r3, #4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fdf6 	bl	80016b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ac8:	e089      	b.n	8001bde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8be 	bl	8001c60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8fd 	bl	8001cf8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	d12f      	bne.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d02a      	beq.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b2e:	e001      	b.n	8001b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4919      	ldr	r1, [pc, #100]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b42:	e001      	b.n	8001b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fda6 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d136      	bne.n	8001be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d031      	beq.n	8001be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4902      	ldr	r1, [pc, #8]	; (8001ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001b9a:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b9c:	e006      	b.n	8001bac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001b9e:	bf00      	nop
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	40003400 	.word	0x40003400
 8001ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bb0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f043 0204 	orr.w	r2, r3, #4
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fd6c 	bl	80016b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bdc:	e000      	b.n	8001be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bde:	bf00      	nop
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	1c99      	adds	r1, r3, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d113      	bne.n	8001c56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d106      	bne.n	8001c56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffc9 	bl	8001be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	1c99      	adds	r1, r3, #2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6251      	str	r1, [r2, #36]	; 0x24
 8001c72:	8819      	ldrh	r1, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <I2SEx_TxISR_I2SExt+0x22>
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001c80:	e001      	b.n	8001c86 <I2SEx_TxISR_I2SExt+0x26>
 8001c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c86:	460a      	mov	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d121      	bne.n	8001ce6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <I2SEx_TxISR_I2SExt+0x50>
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001cae:	e001      	b.n	8001cb4 <I2SEx_TxISR_I2SExt+0x54>
 8001cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	d101      	bne.n	8001cc4 <I2SEx_TxISR_I2SExt+0x64>
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001cc2:	e001      	b.n	8001cc8 <I2SEx_TxISR_I2SExt+0x68>
 8001cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ccc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff81 	bl	8001be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40003800 	.word	0x40003800
 8001cf4:	40003400 	.word	0x40003400

08001cf8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d8      	ldr	r0, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	1c99      	adds	r1, r3, #2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001d10:	b282      	uxth	r2, r0
 8001d12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d113      	bne.n	8001d54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ff4a 	bl	8001be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a20      	ldr	r2, [pc, #128]	; (8001dec <I2SEx_RxISR_I2SExt+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <I2SEx_RxISR_I2SExt+0x16>
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <I2SEx_RxISR_I2SExt+0x94>)
 8001d70:	e001      	b.n	8001d76 <I2SEx_RxISR_I2SExt+0x1a>
 8001d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d76:	68d8      	ldr	r0, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	1c99      	adds	r1, r3, #2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001d82:	b282      	uxth	r2, r0
 8001d84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d121      	bne.n	8001de2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <I2SEx_RxISR_I2SExt+0x90>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <I2SEx_RxISR_I2SExt+0x50>
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <I2SEx_RxISR_I2SExt+0x94>)
 8001daa:	e001      	b.n	8001db0 <I2SEx_RxISR_I2SExt+0x54>
 8001dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <I2SEx_RxISR_I2SExt+0x90>)
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d101      	bne.n	8001dc0 <I2SEx_RxISR_I2SExt+0x64>
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <I2SEx_RxISR_I2SExt+0x94>)
 8001dbe:	e001      	b.n	8001dc4 <I2SEx_RxISR_I2SExt+0x68>
 8001dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dc8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff03 	bl	8001be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40003800 	.word	0x40003800
 8001df0:	40003400 	.word	0x40003400

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f001 b823 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 817d 	beq.w	800212a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e30:	4bbc      	ldr	r3, [pc, #752]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3c:	4bb9      	ldr	r3, [pc, #740]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d15c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x10e>
 8001e48:	4bb6      	ldr	r3, [pc, #728]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d155      	bne.n	8001f02 <HAL_RCC_OscConfig+0x10e>
 8001e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x94>
 8001e82:	4ba8      	ldr	r3, [pc, #672]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e015      	b.n	8001eb4 <HAL_RCC_OscConfig+0xc0>
 8001e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ea4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001eb0:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ebc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ec0:	fa92 f2a2 	rbit	r2, r2
 8001ec4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ec8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 811f 	beq.w	8002128 <HAL_RCC_OscConfig+0x334>
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8116 	bne.w	8002128 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f000 bfaf 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12e>
 8001f14:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a82      	ldr	r2, [pc, #520]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e036      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x158>
 8001f32:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a78      	ldr	r2, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e021      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x184>
 8001f5e:	4b71      	ldr	r3, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a70      	ldr	r2, [pc, #448]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6d      	ldr	r2, [pc, #436]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f023 020f 	bic.w	r2, r3, #15
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	495f      	ldr	r1, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d059      	beq.n	800206e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fce1 	bl	8000980 <HAL_GetTick>
 8001fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe fcdc 	bl	8000980 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d902      	bls.n	8001fda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f000 bf43 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 8001fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x218>
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e015      	b.n	8002038 <HAL_RCC_OscConfig+0x244>
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002024:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002028:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002040:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800204c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ab      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1d0>
 800206c:	e05d      	b.n	800212a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fc87 	bl	8000980 <HAL_GetTick>
 8002072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fc82 	bl	8000980 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d902      	bls.n	800208e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	f000 bee9 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 800208e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002092:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2cc>
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e015      	b.n	80020ec <HAL_RCC_OscConfig+0x2f8>
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_RCC_OscConfig+0x330>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002100:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0220 	orr.w	r2, r2, #32
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ab      	bne.n	8002078 <HAL_RCC_OscConfig+0x284>
 8002120:	e003      	b.n	800212a <HAL_RCC_OscConfig+0x336>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 817d 	beq.w	800243a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002140:	4ba6      	ldr	r3, [pc, #664]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800214c:	4ba3      	ldr	r3, [pc, #652]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d172      	bne.n	800223e <HAL_RCC_OscConfig+0x44a>
 8002158:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d16c      	bne.n	800223e <HAL_RCC_OscConfig+0x44a>
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002176:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x3a0>
 800218e:	4b93      	ldr	r3, [pc, #588]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0x3c8>
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021b8:	4b88      	ldr	r3, [pc, #544]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCC_OscConfig+0x410>
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	f000 be2e 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b75      	ldr	r3, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	21f8      	movs	r1, #248	; 0xf8
 800221a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002222:	fa91 f1a1 	rbit	r1, r1
 8002226:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800222a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800222e:	fab1 f181 	clz	r1, r1
 8002232:	b2c9      	uxtb	r1, r1
 8002234:	408b      	lsls	r3, r1
 8002236:	4969      	ldr	r1, [pc, #420]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223c:	e0fd      	b.n	800243a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8088 	beq.w	8002360 <HAL_RCC_OscConfig+0x56c>
 8002250:	2301      	movs	r3, #1
 8002252:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002262:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fb80 	bl	8000980 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7fe fb7b 	bl	8000980 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f000 bde2 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d8>
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e013      	b.n	80022f4 <HAL_RCC_OscConfig+0x500>
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2202      	movs	r2, #2
 80022f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002306:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0af      	beq.n	8002286 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	21f8      	movs	r1, #248	; 0xf8
 800233c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002344:	fa91 f1a1 	rbit	r1, r1
 8002348:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800234c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002350:	fab1 f181 	clz	r1, r1
 8002354:	b2c9      	uxtb	r1, r1
 8002356:	408b      	lsls	r3, r1
 8002358:	4920      	ldr	r1, [pc, #128]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	e06c      	b.n	800243a <HAL_RCC_OscConfig+0x646>
 8002360:	2301      	movs	r3, #1
 8002362:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002372:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe faf8 	bl	8000980 <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe faf3 	bl	8000980 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d902      	bls.n	80023ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	f000 bd5a 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d104      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5ec>
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e015      	b.n	8002408 <HAL_RCC_OscConfig+0x614>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	2302      	movs	r3, #2
 80023e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002404:	4bc8      	ldr	r3, [pc, #800]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2202      	movs	r2, #2
 800240a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800240e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002412:	fa92 f2a2 	rbit	r2, r2
 8002416:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800241a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ad      	bne.n	8002396 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8110 	beq.w	8002670 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d079      	beq.n	8002554 <HAL_RCC_OscConfig+0x760>
 8002460:	2301      	movs	r3, #1
 8002462:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4bab      	ldr	r3, [pc, #684]	; (800272c <HAL_RCC_OscConfig+0x938>)
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	461a      	mov	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe fa79 	bl	8000980 <HAL_GetTick>
 800248e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002494:	f7fe fa74 	bl	8000980 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d902      	bls.n	80024aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	f000 bcdb 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002502:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 8002506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002510:	2102      	movs	r1, #2
 8002512:	6019      	str	r1, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f1a3 	rbit	r1, r3
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800252a:	6019      	str	r1, [r3, #0]
  return result;
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0a0      	beq.n	8002494 <HAL_RCC_OscConfig+0x6a0>
 8002552:	e08d      	b.n	8002670 <HAL_RCC_OscConfig+0x87c>
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002580:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x938>)
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe f9f3 	bl	8000980 <HAL_GetTick>
 800259a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe f9ee 	bl	8000980 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d902      	bls.n	80025b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f000 bc55 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002606:	2202      	movs	r2, #2
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002620:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 8002624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800262e:	2102      	movs	r1, #2
 8002630:	6019      	str	r1, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f1a3 	rbit	r1, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002648:	6019      	str	r1, [r3, #0]
  return result;
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d197      	bne.n	80025a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 81a1 	beq.w	80029c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268c:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11a      	bne.n	8002708 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe f94f 	bl	8000980 <HAL_GetTick>
 80026e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe f94a 	bl	8000980 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e3b1      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_OscConfig+0x940>
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a02      	ldr	r2, [pc, #8]	; (8002728 <HAL_RCC_OscConfig+0x934>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e03c      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	10908120 	.word	0x10908120
 8002730:	40007000 	.word	0x40007000
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x96a>
 8002744:	4bc1      	ldr	r3, [pc, #772]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4ac0      	ldr	r2, [pc, #768]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	4bbe      	ldr	r3, [pc, #760]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4abd      	ldr	r2, [pc, #756]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e020      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x994>
 800276e:	4bb7      	ldr	r3, [pc, #732]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4ab6      	ldr	r2, [pc, #728]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4bb4      	ldr	r3, [pc, #720]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4ab3      	ldr	r2, [pc, #716]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 8002788:	4bb0      	ldr	r3, [pc, #704]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4aaf      	ldr	r2, [pc, #700]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4bad      	ldr	r3, [pc, #692]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4aac      	ldr	r2, [pc, #688]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8081 	beq.w	80028b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f8e5 	bl	8000980 <HAL_GetTick>
 80027b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe f8e0 	bl	8000980 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e345      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800281a:	601a      	str	r2, [r3, #0]
  return result;
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002824:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0xa4c>
 800283a:	4b84      	ldr	r3, [pc, #528]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	e013      	b.n	8002868 <HAL_RCC_OscConfig+0xa74>
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002870:	2102      	movs	r1, #2
 8002872:	6011      	str	r1, [r2, #0]
 8002874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002878:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	fa92 f1a2 	rbit	r1, r2
 8002882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002886:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800288a:	6011      	str	r1, [r2, #0]
  return result;
 800288c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002890:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d084      	beq.n	80027bc <HAL_RCC_OscConfig+0x9c8>
 80028b2:	e07f      	b.n	80029b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe f864 	bl	8000980 <HAL_GetTick>
 80028b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe f85f 	bl	8000980 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2c4      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002902:	2202      	movs	r2, #2
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fa93 f2a3 	rbit	r2, r3
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800291c:	601a      	str	r2, [r3, #0]
  return result;
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002926:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0xb4e>
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	e013      	b.n	800296a <HAL_RCC_OscConfig+0xb76>
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800294a:	2202      	movs	r2, #2
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002972:	2102      	movs	r1, #2
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002988:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002992:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d184      	bne.n	80028be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8242 	beq.w	8002e5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	f000 8213 	beq.w	8002e0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 8162 	bne.w	8002cbe <HAL_RCC_OscConfig+0xeca>
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a1e:	601a      	str	r2, [r3, #0]
  return result;
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fd ff9e 	bl	8000980 <HAL_GetTick>
 8002a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	e00c      	b.n	8002a64 <HAL_RCC_OscConfig+0xc70>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fd ff96 	bl	8000980 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1fd      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a88:	601a      	str	r2, [r3, #0]
  return result;
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0xcba>
 8002aa8:	4bb0      	ldr	r3, [pc, #704]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e027      	b.n	8002afe <HAL_RCC_OscConfig+0xd0a>
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	4b9c      	ldr	r3, [pc, #624]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b02:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b0a:	6011      	str	r1, [r2, #0]
 8002b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b10:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	fa92 f1a2 	rbit	r1, r2
 8002b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b22:	6011      	str	r1, [r2, #0]
  return result;
 8002b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b28:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d182      	bne.n	8002a50 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4a:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	497f      	ldr	r1, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ba0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fd fee2 	bl	8000980 <HAL_GetTick>
 8002bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc0:	e009      	b.n	8002bd6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fd fedd 	bl	8000980 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e144      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bfa:	601a      	str	r2, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe2c>
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e027      	b.n	8002c70 <HAL_RCC_OscConfig+0xe7c>
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d082      	beq.n	8002bc2 <HAL_RCC_OscConfig+0xdce>
 8002cbc:	e0cf      	b.n	8002e5e <HAL_RCC_OscConfig+0x106a>
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ce2:	601a      	str	r2, [r3, #0]
  return result;
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2300      	movs	r3, #0
 8002d02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fd fe3c 	bl	8000980 <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fd fe37 	bl	8000980 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e09e      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d104      	bne.n	8002d70 <HAL_RCC_OscConfig+0xf7c>
 8002d66:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0xfcc>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x1078>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	fa92 f1a2 	rbit	r1, r2
 8002ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002de4:	6011      	str	r1, [r2, #0]
  return result;
 8002de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d180      	bne.n	8002d0e <HAL_RCC_OscConfig+0xf1a>
 8002e0c:	e027      	b.n	8002e5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01e      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_OscConfig+0x1078>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b09e      	sub	sp, #120	; 0x78
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e162      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b90      	ldr	r3, [pc, #576]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	498b      	ldr	r1, [pc, #556]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b89      	ldr	r3, [pc, #548]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e14a      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	497f      	ldr	r1, [pc, #508]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80dc 	beq.w	800309c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13c      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xf6>
 8002eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xa6>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	e00f      	b.n	8002f36 <HAL_RCC_ClockConfig+0xc6>
 8002f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	667b      	str	r3, [r7, #100]	; 0x64
 8002f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d17b      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0f3      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d13c      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x178>
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x128>
 8002f92:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
 8002f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
 8002fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13a      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b2      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_ClockConfig+0x1a0>
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e00d      	b.n	800302c <HAL_RCC_ClockConfig+0x1bc>
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	617a      	str	r2, [r7, #20]
  return result;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e079      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	491a      	ldr	r1, [pc, #104]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fd fc88 	bl	8000980 <HAL_GetTick>
 8003070:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fd fc84 	bl	8000980 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e061      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4906      	ldr	r1, [pc, #24]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e040      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	491a      	ldr	r1, [pc, #104]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4912      	ldr	r1, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003112:	f000 f829 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003120:	22f0      	movs	r2, #240	; 0xf0
 8003122:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	fa92 f2a2 	rbit	r2, r2
 800312a:	60fa      	str	r2, [r7, #12]
  return result;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	40d3      	lsrs	r3, r2
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x2ec>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_RCC_ClockConfig+0x2f0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_ClockConfig+0x2f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fbd6 	bl	80008f8 <HAL_InitTick>
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3778      	adds	r7, #120	; 0x78
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	080035e4 	.word	0x080035e4
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003196:	e03c      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 800319a:	623b      	str	r3, [r7, #32]
      break;
 800319c:	e03c      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	fa92 f2a2 	rbit	r2, r2
 80031b0:	607a      	str	r2, [r7, #4]
  return result;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	40d3      	lsrs	r3, r2
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031be:	5cd3      	ldrb	r3, [r2, r3]
 80031c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	220f      	movs	r2, #15
 80031cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	fa92 f2a2 	rbit	r2, r2
 80031d4:	60fa      	str	r2, [r7, #12]
  return result;
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	40d3      	lsrs	r3, r2
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	e004      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	623b      	str	r3, [r7, #32]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003214:	623b      	str	r3, [r7, #32]
      break;
 8003216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003218:	6a3b      	ldr	r3, [r7, #32]
}
 800321a:	4618      	mov	r0, r3
 800321c:	372c      	adds	r7, #44	; 0x2c
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	007a1200 	.word	0x007a1200
 8003230:	080035f4 	.word	0x080035f4
 8003234:	08003604 	.word	0x08003604
 8003238:	003d0900 	.word	0x003d0900

0800323c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b092      	sub	sp, #72	; 0x48
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80d4 	beq.w	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003260:	4b4e      	ldr	r3, [pc, #312]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a4a      	ldr	r2, [pc, #296]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fb6d 	bl	8000980 <HAL_GetTick>
 80032a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fd fb69 	bl	8000980 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e14b      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c8:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8084 	beq.w	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d07c      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	461a      	mov	r2, r3
 8003312:	2301      	movs	r3, #1
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	461a      	mov	r2, r3
 8003336:	2300      	movs	r3, #0
 8003338:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04b      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fd fb19 	bl	8000980 <HAL_GetTick>
 800334e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fd fb15 	bl	8000980 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0f5      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003368:	2302      	movs	r3, #2
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	2302      	movs	r3, #2
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	61fb      	str	r3, [r7, #28]
  return result;
 8003380:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d108      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003396:	4b01      	ldr	r3, [pc, #4]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	e00d      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	10908100 	.word	0x10908100
 80033a8:	2302      	movs	r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	4b69      	ldr	r3, [pc, #420]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2202      	movs	r2, #2
 80033ba:	613a      	str	r2, [r7, #16]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	fa92 f2a2 	rbit	r2, r2
 80033c2:	60fa      	str	r2, [r7, #12]
  return result;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f002 021f 	and.w	r2, r2, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0b7      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033e2:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	495b      	ldr	r1, [pc, #364]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003414:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f023 0203 	bic.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494e      	ldr	r1, [pc, #312]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f023 0210 	bic.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	4947      	ldr	r1, [pc, #284]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003450:	4b42      	ldr	r3, [pc, #264]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	493f      	ldr	r1, [pc, #252]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f023 0220 	bic.w	r2, r3, #32
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4938      	ldr	r1, [pc, #224]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800349a:	4313      	orrs	r3, r2
 800349c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4929      	ldr	r1, [pc, #164]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4921      	ldr	r1, [pc, #132]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	491a      	ldr	r1, [pc, #104]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003504:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	4912      	ldr	r1, [pc, #72]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003512:	4313      	orrs	r3, r2
 8003514:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	490b      	ldr	r1, [pc, #44]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003530:	4313      	orrs	r3, r2
 8003532:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800354e:	4313      	orrs	r3, r2
 8003550:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3748      	adds	r7, #72	; 0x48
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000

08003560 <memset>:
 8003560:	4402      	add	r2, r0
 8003562:	4603      	mov	r3, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <__libc_init_array>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4d0d      	ldr	r5, [pc, #52]	; (80035a8 <__libc_init_array+0x38>)
 8003574:	4c0d      	ldr	r4, [pc, #52]	; (80035ac <__libc_init_array+0x3c>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	2600      	movs	r6, #0
 800357c:	42a6      	cmp	r6, r4
 800357e:	d109      	bne.n	8003594 <__libc_init_array+0x24>
 8003580:	4d0b      	ldr	r5, [pc, #44]	; (80035b0 <__libc_init_array+0x40>)
 8003582:	4c0c      	ldr	r4, [pc, #48]	; (80035b4 <__libc_init_array+0x44>)
 8003584:	f000 f818 	bl	80035b8 <_init>
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	2600      	movs	r6, #0
 800358e:	42a6      	cmp	r6, r4
 8003590:	d105      	bne.n	800359e <__libc_init_array+0x2e>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	f855 3b04 	ldr.w	r3, [r5], #4
 8003598:	4798      	blx	r3
 800359a:	3601      	adds	r6, #1
 800359c:	e7ee      	b.n	800357c <__libc_init_array+0xc>
 800359e:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a2:	4798      	blx	r3
 80035a4:	3601      	adds	r6, #1
 80035a6:	e7f2      	b.n	800358e <__libc_init_array+0x1e>
 80035a8:	08003614 	.word	0x08003614
 80035ac:	08003614 	.word	0x08003614
 80035b0:	08003614 	.word	0x08003614
 80035b4:	08003618 	.word	0x08003618

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
